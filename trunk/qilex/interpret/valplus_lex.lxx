
%option noyywrap
%option c++

%{
/**********************************************************************/
/*	INSTITUTO DE CIBERNETICA 				      */
/*	INTERPRETE DE VAL-II	-	Analizador Lexico             */
/*	Autor: Jorge Villalobos	/Leopold Palomo				      */
/*	Fecha: Julio 1990 /Abril 2003				      */
/**********************************************************************/

/* El analizador lexico pasa a minusculas todos los caracteres leidos
   antes de procesarlos. La unica excepcion son los strings que requieren
   un tratamiento diferente. A medida que va leyendo va pasando el
   contenido de la linea actual a un buffer, que servira para informar
   la posicion de los errores encontrados. Cuenta tambien el numero de
   lineas leidas */

   
#include "valplus.h" // Make sure the flexer can communicate with bison++
                      //using return values
#include <stdlib.h>


/*==================================================================*/
/* variables and functions for lexer                                */
/*==================================================================*/

  int LineNr=1; //keep track of line
  
  void resetvalLine(){
    LineNr=1;
  }

  valParser* parser;
  void setvalParser(valParser* p){
    parser=p;
  }

  int getvalLineNr(){
    return LineNr;
  }


  //---------------------------------------------
  // keep track of line and column
  //
  void count(char* lextext){
    int i;
    for (i = 0; lextext[i] != '\0'; i++)
    {
      if (lextext[i] == '\n')
      {
         LineNr++;
      }
    }
  }
  /**********************************************************************
   *  stof() convierte una cadena de caracteres numericos en el valor
   *        real correspondiente
   ***********************************************************************/

   double stof(char stval[])
   {
      double fval=0.0;
      double posdec=0.1;
      int signo, i;

      if(stval[0]=='-'){
         signo=-1;
         i=1;}
      else{
         signo=1;
         i=0; }
         
      for(;stval[i]!='\0' && stval[i]!='.';i++)
      
      fval=(fval*10.0)+(stval[i]-'0');
      if(stval[i]=='.')
      {
         for(i++;stval[i]!='\0';i++)
         {
            fval+=posdec*(stval[i]-'0');
            posdec/=10.0;
         }
      }
      return(signo*fval);
   }


%}


%%

[ \t]+			{ }

\n			{LineNr++; return(0); }

";".*\n		        { LineNr++;}

load			{return(valParser::TkLOAD);}
exe			{return(valParser::TkEXE);}
listl			{return(valParser::TkLISTL);}
deletel			{return(valParser::TkDELETEL);}
deletep			{return(valParser::TkDELETEP);}
storel			{return(valParser::TkSTOREL);}
dir			{return(valParser::TkDIR);}
pcexecute		{return(valParser::TkPCEXECUTE);}
pcend			{return(valParser::TkPCEND);}
trace			{return(valParser::TkTRACE);}
untrace			{return(valParser::TkUNTRACE);}

delay			{return(valParser::TkDELAY);}
closei			{return(valParser::TkCLOSEI);}
openi			{return(valParser::TkOPENI);}
depart			{return(valParser::TkDEPART);}
departs			{return(valParser::TkDEPARTS);}
appro			{return(valParser::TkAPPRO);}
appros			{return(valParser::TkAPPROS);}
move			{return(valParser::TkMOVE);}
moves			{return(valParser::TkMOVES);}
set			{return(valParser::TkSET);}
where			{return(valParser::TkWHERE);}
speed			{return(valParser::TkSPEED);}
here			{return(valParser::TkHERE);}
trans			{return(valParser::TkTRANS);}
#ppoint			{return(valParser::TkPPOINT);}
inrange			{return(valParser::TkINRANGE);}
inverse			{return(valParser::TkINVERSE);}
world			{return(valParser::TkWORLD);}

type			{return(valParser::TkTYPE);}
prompt			{return(valParser::TkPROMPT);}

if			{return(valParser::TkIF);}
then			{return(valParser::TkTHEN);}
else			{return(valParser::TkELSE);}
end  			{return(valParser::TkEND);}
while			{return(valParser::TkWHILE);}
do			{return(valParser::TkDO);}
until			{return(valParser::TkUNTIL);}
for			{return(valParser::TkFOR);}
to			{return(valParser::TkTO);}
step			{return(valParser::TkSTEP);}
case			{return(valParser::TkCASE);}
of			{return(valParser::TkOF);}
call			{return(valParser::TkCALL);}
return			{return(valParser::TkRETURN);}

program			{return(valParser::TkPROGRAM);}
locations		{return(valParser::TkLOCATIONS);}
reals			{return(valParser::TkREALS);}

"."			{}

"+"			{return(valParser::TkMAS);}
"-"			{return(valParser::TkMENOS);}
"*"			{return(valParser::TkPOR);}
"/"			{return(valParser::TkDIVISION);}
"%"			{return(valParser::TkMODULO);}

"=="  			{return(valParser::TkEQ);}
"<>"			{return(valParser::TkNE);}
"<"			{return(valParser::TkLT);}
">"			{return(valParser::TkGT);}
"<="			{return(valParser::TkLE);}
"=<"			{return(valParser::TkLE);}
">="			{return(valParser::TkGE);}
"=>"			{return(valParser::TkGE);}

not			{return(valParser::TkNOT);}
and			{return(valParser::TkAND);}
or			{return(valParser::TkOR);}

true			{return(valParser::TkTRUE);}
false			{return(valParser::TkFALSE);}

body			{return(valParser::TkBODY);}
place			{return(valParser::TkPLACE);}
splace			{return(valParser::TkSPLACE);}

flipview		{return(valParser::TkFLIPVIEW);}
view			{return(valParser::TkVIEW);}
drawloc			{return(valParser::TkDRAWLOC);}
drawlocs		{return(valParser::TkDRAWLOCS);}
eraseloc		{return(valParser::TkERASELOC);}
eraselocs		{return(valParser::TkERASELOCS);}
align			{return(valParser::TkALIGN);}
ready			{return valParser::TkREADY;}

[a-z][a-z0-9]*		{ parser->yylval.y_typevar.name = new std::string(yytext);
                    parser->yylval.y_typevar.tipus = 0;
                    return(valParser::TkVARP); }

#[a-z][a-z0-9]*	{ parser->yylval.y_typevar.name = new std::string(yytext);
                    parser->yylval.y_typevar.tipus = 1;
                    return(valParser::TkVARPP); }
                    
(\-?)[0-9]*(\.?)[0-9]*	{ parser->yylval.y_double=atof(yytext);
			  return(valParser::TkNUMERO); }

\"[^"]* {parser->yylval.y_str=new std::string(yytext);
                  return(valParser::TkSTRING);}

.			{return(*yytext);}

%%

